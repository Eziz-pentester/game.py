def print_board(board):
    """
    Функция для отображения игрового поля.
    :param board: Двумерный список, представляющий поле игры.
    """
    for row in board:
        # Вывод каждой строки игрового поля
        print(" ".join(row))
    print()

def check_winner(board):
    """
    Проверяет, есть ли победитель на игровом поле.
    :param board: Двумерный список, представляющий поле игры.
    :return: True, если есть победитель, иначе False.
    """
    # Проверка строк на одинаковые элементы
    for row in board:
        if row.count(row[0]) == len(row) and row[0] != ' ':
            return True

    # Проверка столбцов на одинаковые элементы
    for col in range(len(board)):
        if all(board[row][col] == board[0][col] and board[row][col] != ' ' for row in range(len(board))):
            return True

    # Проверка главной диагонали
    if all(board[i][i] == board[0][0] and board[i][i] != ' ' for i in range(len(board))):
        return True

    # Проверка побочной диагонали
    if all(board[i][len(board)-1-i] == board[0][len(board)-1] and board[i][len(board)-1-i] != ' ' for i in range(len(board))):
        return True

    # Победителя нет
    return False

def is_board_full(board):
    """
    Проверяет, заполнено ли игровое поле.
    :param board: Двумерный список, представляющий поле игры.
    :return: True, если поле полностью заполнено, иначе False.
    """
    return all(board[row][col] != ' ' for row in range(len(board)) for col in range(len(board[0])))

def tic_tac_toe():
    """
    Основная функция для игры "Крестики-нолики".
    """
    # Создаем пустое игровое поле 3x3
    board = [[' ' for _ in range(3)] for _ in range(3)]
    current_player = 'X'  # Первый ход за игроком 'X'

    while True:
        # Отображаем текущее состояние игрового поля
        print_board(board)

        try:
            # Запрашиваем у игрока координаты хода
            row = int(input("Введите номер строки (0, 1, 2): "))
            col = int(input("Введите номер столбца (0, 1, 2): "))

            # Проверяем, находится ли ход в пределах игрового поля
            if row not in range(3) or col not in range(3):
                print("Ошибка: введите числа от 0 до 2.")
                continue

            # Проверяем, свободна ли выбранная ячейка
            if board[row][col] == ' ':
                # Делаем ход
                board[row][col] = current_player

                # Проверяем, выиграл ли текущий игрок
                if check_winner(board):
                    print_board(board)
                    print(f"Игрок {current_player} победил!")
                    break
                # Проверяем, заполнено ли поле (ничья)
                elif is_board_full(board):
                    print_board(board)
                    print("Ничья!")
                    break
                else:
                    # Передаем ход другому игроку
                    current_player = 'O' if current_player == 'X' else 'X'
            else:
                print("Эта ячейка уже занята. Выберите другую.")
        except ValueError:
            print("Ошибка: введите числовое значение для строки и столбца.")
        except IndexError:
            print("Ошибка: координаты вне допустимого диапазона. Попробуйте снова.")

if __name__ == "__main__":
    # Запускаем игру
    tic_tac_toe()

